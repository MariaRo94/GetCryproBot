package org.example;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

//todo –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ slf4j
//todo —Å–≤—è–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
//todo –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –°–æ–ª–∞–Ω—ã
//todo –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≠—Ç–µ—Ä–∏—É–º–∞
//todo –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∏ —Å –∞–ø–∏—à–∫–æ–π\
//todo –¥–æ–±–∞–≤–∏—Ç—å —é–Ω–∏—Ç —Ç–µ—Å—Ç—ã
//todo —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤ –¥–æ–∫–µ—Ä–µ
//todo —Å–¥–µ–ª–∞—Ç—å —Å–±–æ—Ä–∫–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å
//todo –ø–æ–¥—É–º–∞—Ç—å —á—Ç–æ –º–æ–∂–Ω–æ —â–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å –∫—Ä–∏–ø—Ç–æ–π


@Slf4j
public class GetCryptoCurrencyRateBot extends TelegramLongPollingBot {
    private static final String BOT_TOKEN = "8010622979:AAE3GeyCINvdoySpHE0u03E_acwVh7YxgvQ";
    private static final String BOT_USERNAME = "CRYPTO_TRADER_BOT";
    private final CryptoPriceService cryptoPriceService;

    public GetCryptoCurrencyRateBot() {
        this.cryptoPriceService = new CryptoPriceService();
    }

    @Override
    public String getBotUsername() {

        return BOT_USERNAME;
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }


    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            switch (messageText.toLowerCase()) {
                case "/start":
                case "üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                    sendMainMenu(chatId);
                    sendWelcomeMessage(chatId);
                    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º", chatId);
                    break;

                case "/pricebtc":
                case "üí∞ –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å BTC":
                    handlePriceRequest(chatId);
                    log.info("–°–¥–µ–ª–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –±–∏—Ç–∫–æ–∏–Ω–∞");
                    break;

                case "/help":
                case "‚ÑπÔ∏è –ø–æ–º–æ—â—å":
                case "–ø–æ–º–æ—â—å":
                    sendHelpMessage(chatId);
                    break;

                default:
                    sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n" +
                            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
                            "/pricebtc - –ö—É—Ä—Å BTC\n" +
                            "/help - –ü–æ–º–æ—â—å");
                    break;
            }
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendHelpMessage(long chatId) {
        ;

    }


    private void handlePriceRequest(long chatId) {
        try {
            String price = cryptoPriceService.getBitcoinPrice();
            sendMessage(chatId, "–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC: " + price);
            log.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ BTC –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", chatId);
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞");
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –±–∏—Ç–∫–æ–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", chatId, e);
        }
    }


    private void sendWelcomeMessage(long chatId) {
        String welcomeText = "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoBot!\n\n" +
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/pricebtc - —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC\n" +
                "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É";

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(welcomeText);
        message.setReplyMarkup(ButtonsFactory.createMainMenuKeyboard());

        try {
            execute(message);
            log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ");
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", e);
        }
    }

    private void sendMainMenu(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        message.setReplyMarkup(ButtonsFactory.createMainMenuKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

}


